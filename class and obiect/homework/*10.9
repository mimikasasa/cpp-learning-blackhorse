#include<iostream>
#include<array>
#include<cctype>
using namespace std;

// Default constructor; conversion constructor that converts
// a long integer into a HugeInt object
class HugeInt {
    friend ostream& operator<<(ostream&, const HugeInt&);

public:
    static const int digits = 30;  // Maximum digits in a HugeInt

    HugeInt(long = 0);
    HugeInt(const string&);

    HugeInt operator+(const HugeInt& op2) const {
        HugeInt temp;
        int carry = 0;

        for (int i = digits - 1; i >= 0; i--) {
            temp.integer[i] = integer[i] + op2.integer[i] + carry;

            if (temp.integer[i] > 9) {
                temp.integer[i] %= 10;
                carry = 1;
            } else
                carry = 0;
        }
        return temp;
    }
    HugeInt operator+(int op2) const {
        return *this + HugeInt(op2);
    }
    HugeInt operator+(const string& op2) const {
        return *this + HugeInt(op2);
    }

    HugeInt operator*(const HugeInt& op2) const {
        HugeInt result;
        HugeInt temp;

        for (int i = digits - 1; i >= 0; i--) {
            int carry = 0;
            temp = *this;

            for (int j = digits - 1; j >= 0; j--) {
                int product = (op2.integer[i] * temp.integer[j]) + carry;
                result.integer[i + j] += product % 10;
                carry = product / 10 + result.integer[i + j] / 10;
                result.integer[i + j] %= 10;
            }
        }

        return result;
    }

    HugeInt operator/(const HugeInt& op2) const {
        HugeInt result;
        HugeInt temp = *this;
        HugeInt divisor = op2;
        HugeInt quotient;

        while (temp >= divisor) {
            quotient = 0;
            while (temp >= (divisor * 10)) {
                divisor = divisor * 10;
                quotient = quotient * 10;
            }

            while (temp >= divisor) {
                temp = temp - divisor;
                quotient = quotient + 1;
            }

            result = result + quotient;
            divisor = op2;
        }

        return result;
    }

    bool operator==(const HugeInt& op2) const {
        for (int i = 0; i < digits; ++i) {
            if (integer[i] != op2.integer[i]) {
                return false;
            }
        }
        return true;
    }

    bool operator!=(const HugeInt& op2) const {
        return !(*this == op2);
    }

    bool operator<(const HugeInt& op2) const {
        for (int i = 0; i < digits; ++i) {
            if (integer[i] < op2.integer[i]) {
                return true;
            } else if (integer[i] > op2.integer[i]) {
                return false;
            }
        }
        return false; // If equal, return false
    }

    bool operator<=(const HugeInt& op2) const {
        return (*this < op2) || (*this == op2);
    }

    bool operator>(const HugeInt& op2) const {
        return !(*this <= op2);
    }

    bool operator>=(const HugeInt& op2) const {
        return !(*this < op2);
    }

private:
    array<short, digits> integer;

};

ostream& operator<<(ostream& output, const HugeInt& num) {
    int i;

    for (i = 0; (i < HugeInt::digits) && (0 == num.integer[i]); ++i);

    if (i == HugeInt::digits) {
        output << 0;
    } else
        for (; i < HugeInt::digits; ++i) {
            output << num.integer[i];
        }
    return output;
}

HugeInt::HugeInt(long value) {
    // Initialize array to zero
    for (short& element : integer) {
        element = 0;
    }
    for (size_t j = digits - 1; value != 0 && j >= 0; j--) {
        integer[j] = value % 10;
        value /= 10;
    }
}

HugeInt::HugeInt(const string& number) {
    for (short& element : integer) {
        element = 0;
    }
    size_t length = number.size();
    for (size_t j = digits - length, k = 0; j < digits; ++j, ++k) {
        if (isdigit(number[k])) {
            integer[j] = number[k] - '0';
        }
    }
}

int main() {
    HugeInt hi1(1234567890);
    HugeInt hi2("987654321012345678909876543210");

    cout << "hi1: " << hi1 << endl;
    cout << "hi2: " << hi2 << endl;

    HugeInt hi3 = hi1 + hi2;
    cout << "hi1 + hi2: " << hi3 << endl;

    HugeInt hi4 = hi1 * hi2;
    cout << "hi1 * hi2: " << hi4 << endl;

    HugeInt hi5 = hi2 / hi1;
    cout << "hi2 / hi1: " << hi5 << endl;

    cout << "hi1 == hi2: " << (hi1 == hi2) << endl;
    cout << "hi1 != hi2: " << (hi1 != hi2) << endl;
    cout << "hi1 < hi2: " << (hi1 < hi2) << endl;
    cout << "hi1 <= hi2: " << (hi1 <= hi2) << endl;
    cout << "hi1 > hi2: " << (hi1 > hi2) << endl;
    cout << "hi1 >= hi2: " << (hi1 >= hi2) << endl;

    return 0;
}
