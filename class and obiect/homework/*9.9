#include<iostream>
#include<iomanip>	
#include<array>
#include<stdexcept>
#include"DateAndTime.h"
using namespace std;

Date::Date(int m, int d, int y)
{
	if (m > 0 && m <= monthsPerYear)//validate the month
	{
		month = m;
	}
	else throw invalid_argument("month must be 1-12");

	year = y;
	day = checkDay(d);//validate the day
}

void Date::print()const
{
	cout<< month << "/" << day << '/' << year << "  ";
}

//utility function to confirm proper day value based on
//month and year; handles leap years(闰年)
unsigned int Date::checkDay(int testDay)const
{
	static const array<int, monthsPerYear + 1>daysPerMonth = { 0,31,28,31,30,31,30,31,31,30,31,30,31 };

	//determine whether testDay is valid for specified month
	if (testDay > 0 && testDay <= daysPerMonth[month])
		return testDay;

	//February 29 check for leap year
	if (month == 2 && testDay == 29 && (year % 4 == 0))
		return testDay;

	throw invalid_argument("Invalid day for current month and year");
}

void Date::nextDay()
{
	int a = ++day;
	if (a == 32)
	{
		day = 1;
		int b = ++month;
		if (b == 13)
		{
			month = 1;
			year++;
		}
	}
	else if (a == 31)
	{
		if (month == 4 || month == 6 || month == 9 || month == 11)
		{
			day = 1;
			month++;
		}
		else day = a;
	}
	else if (a == 30)
	{
		if (month == 2 && year % 4 == 0)
		{
			month++;
			day = 1;
		}
		else day = a;
	}
	else if (a == 29)
	{
		if (month == 2 && year % 4 != 0)
		{
			month++;
			day = 1;
		}
		else day = a;
	}
	else day = checkDay(a);

}

Time::Time(int hour, int minute, int second)
{
	setTime(hour, minute, second);//validate and set time
}//end Time constructor

//set new Time value using universal time
void Time::setTime(int h, int m, int s)
{
	setHour(h);//set private field hour
	setMinute(m);//set private field minute
	setSecond(s);//set private field second
}//end function setTime

//set hour value
void Time::setHour(int h)
{
	if (h >= 0 && h < 24)
		hour = h;
	else
		throw invalid_argument("hour must be 0-23");
}//end function setHour

//set minute value
void Time::setMinute(int m)
{
	if (m >= 0 && m < 60)
		minute = m;
	else
		throw invalid_argument("minute must be 0-59");
}//end function setMinute

//set second value
void Time::setSecond(int s)
{
	if (s >= 0 && s < 60)
		second = s;
	else
		throw invalid_argument("second must be 0-59");
}//end function setSecond

//return hour value
unsigned int Time::getHour()const
{
	return hour;
}//end function getHour

//return minute value
unsigned int Time::getMinute()const
{
	return minute;
}//end function getMinute

//return second value
unsigned int Time::getSecond()const
{
	if (0 <= second < 60)
		return second;

}//end function getSecond

//print Time in universal-time format(HH:MM:SS)
void Time::printUniversal()const
{
	cout << setfill('0') << setw(2) << getHour() << ":"
		<< setw(2) << getMinute() << ":" << getSecond()
		<<"--"<<Date::month<<"/"<<Date::day<<"/"<<Date::year<<"  ";
		//setfill('0')设置填充字符为0，当宽度不足setw（2）时自动填充0
}//end function printUniversal

//print Time in standard-time format(HH:MM:SS AM or PM)
void Time::printStandard()const
{
	cout << ((getHour() == 0 || getHour() == 12) ? 12 : getHour() % 12)
		<< ":" << setfill('0') << setw(2) << getMinute()
		<< ":" << setw(2) << getSecond() << (hour < 12 ? "AM" : "PM")
		<< "--" << Date::month << "/" << Date::day << "/" << Date::year << "  ";
}//end function printStandard

void Time::setDate(int m, int d, int y)
{
	if (m > 0 && m <= monthsPerYear)//validate the month
	{
		month = m;
	}
	else throw invalid_argument("month must be 1-12");

	year = y;
	day = checkDay(d);//validate the day
}

//definition of function tick
void Time::tick()
{
	int a = ++second;
	if (a == 60)
	{
		int b = ++minute;
		setSecond(0);
		if (b == 60)
		{
			int c = ++hour;
			if (c == 24)
			{
				setHour(0);
				Date::nextDay();
			}
			else
			{
				setHour(c);
			}
			setMinute(0);
		}
		else
		{
			setMinute(b);
		}
	}
	else
		setSecond(a);
}//--------------------------------------------------------------------------------

#pragma once
#ifndef DATE_H
#define DATE_H


class Time;
//class Date definition
class Date
{
	friend class Time;
public:
	static const unsigned int monthsPerYear = 12;//months in a year
	explicit Date(int = 1, int = 1, int = 2000);//default constructor
	void print()const;//print date in month/day/year format

	void nextDay();//increment Day

private:
	unsigned int month;//1-12
	unsigned int day;//1-31 based on month
	unsigned int year;//year

	//utility function to check if day is proper for month and year
	unsigned int checkDay(int)const;
};//end class Date

#endif


#ifndef TIME_H
#define TIME_H

//Time class definition
class Time:public Date
{
public:
	explicit Time(int = 0, int = 0, int = 0);//default constructor

	//set functions
	void setTime(int, int, int);//set hour,minute,second
	void setHour(int);//set hour(after validation)
	void setMinute(int);//set minute(↑)
	void setSecond(int);//set second(↑)

	void setDate(int, int, int);

	//get functions
	unsigned int getHour()const;//return hour
	unsigned int getMinute()const;//return minute
	unsigned int getSecond()const;//return second

	void printUniversal()const;//output time in universal-time format
	void printStandard()const;//output time in standard-time format

	void tick();

private:
	unsigned int hour;//0-23(21-hour clock format)
	unsigned int minute;//0-59
	unsigned int second;//0-59
};//end class Time

#endif
//---------------------------------------------------------------------------------------------

#include<iostream>
#include<stdexcept>	
#include"DateAndTime.h"
using namespace std;

int main()
{
	Time t1(23,58,58);
	t1.setDate(4, 14, 2024);

	for (int i = 0; i < 70; i++)
	{
		t1.tick();
		t1.printStandard();
		cout << endl;
	}

	system("pause");
	return 0;
}
