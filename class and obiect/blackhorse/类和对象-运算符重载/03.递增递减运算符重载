#include<iostream>
using namespace std;

//重载递增运算符

//自定义整型
class MyInteger
{
	friend ostream& operator<<(ostream& cout, MyInteger myint);

public:

	MyInteger()
	{
		m_Num = 0;
	}

	//重载前置++运算符  返回引用为了对一个数据一直递增
	MyInteger& operator++()
	{
		m_Num++;//先进行++操作
		return *this;//再将自身返回   
		//*this解引用这个指针也就是对指针再次引用，返回的也是一个引用
	}

	//重载后置++运算符
	MyInteger operator++(int) //int代表占位参数  可以用于区分前置和后置 只能写int
	{
		//先 记录当时结果
		MyInteger temp = *this;

		//后 递增
		m_Num++;

		//最后将记录结果做返回
		return temp; //后置递增返回的是值 若返回引用返回的是一个局部变量temp temp在当前函数执行完毕后就会释放 引用无效
	}

private:
	int m_Num;
};

//重载左移运算符
ostream& operator<<(ostream &cout, MyInteger myint)
{
	cout << myint.m_Num;
	return cout;
}

void test1()
{
	MyInteger myint;

	cout << ++(++myint) << endl;
	cout << myint << endl;
}

void test2()
{
	MyInteger myint;
	cout << myint++ << endl;
	cout << myint << endl;
}

int main()
{
	//test1();
	test2();

	system("pause");
	return 0;
}
