#include<iostream>
using namespace std;

//赋值运算符重载

class Person
{
public:
	Person(int age)
	{
		m_Age=new int(age);
	}

	Person& operator=(Person& p)
	{
		//编译器提供的浅拷贝:m_Age = p.m_Age;
		
		//应该先判断是否有属性在堆区  如果有先释放干净  再深拷贝
		if (m_Age != NULL)
		{
			delete m_Age;
			m_Age = NULL;
		}
		//深拷贝
		m_Age = new int(*p.m_Age);

		//调用完函数后还可以返回本身（为了实现连等的操作）
		return *this;
	}

	~Person()
	{
		if (m_Age != NULL)
		{
			delete m_Age;
			m_Age = NULL;
		}
	}

	int* m_Age;
};

void test1()
{
	Person p1(18);
	Person p2(20);
	Person p3(30);

	p3=p2 = p1;//赋值操作

	cout << "p1的年龄为:" << *p1.m_Age << endl;
	cout << "p2的年龄为:" << *p2.m_Age << endl;
	cout << "p3的年龄为:" << *p3.m_Age << endl;
}

int main()
{
	test1();

	//int a = 10, b = 20, c = 30;
	//c = b = a;
	//cout << c << b << a << endl;  10 10 10
	
	system("pause");
	return 0;
}
