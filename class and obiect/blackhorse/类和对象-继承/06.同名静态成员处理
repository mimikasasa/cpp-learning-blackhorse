#include<iostream>
using namespace std;

//继承中的同名静态成员处理方式

class Base
{
public:

	static int m_A;

	static void func()
	{
		cout << "Base-static void func()" << endl;
	}
	static void func(int a)
	{
		cout << "Base-static void func(int a)" << endl;
	}
};
int Base::m_A = 100;

class Son :public Base
{
public:
	static int m_A;

	static void func()
	{
		cout << "Son-static void func()" << endl;
	}
};
int Son::m_A = 200;

//同名静态成员属性
void test1()
{
	//1.通过对象访问
	cout << "通过对象访问:" << endl;
	Son s;
	cout << "Son-m_A=" << s.m_A << endl;//同名直接访问得到子类的
	cout << "Base-m_A=" << s.Base::m_A << endl;

	//2.通过类名访问
	cout << "通过类名访问:" << endl;
	cout << "Son-m_A=" << Son::m_A << endl;
	//第一个::代表通过类名方式访问  第二个::代表访问父类作用域下
	cout << "Base-m_A=" << Son::Base::m_A << endl;
}

//同名静态成员函数
void test2()
{
	//1.通过对象访问
	cout << "通过对象访问" << endl;
	Son s;
	s.func();
	s.Base::func();

	//2.通过类名访问
	cout << "通过类名访问" << endl;
	Son::func();
	Son::Base::func();

	//复习：子类中的同名会把父类中的同名函数全都隐藏掉  不管有没有重载
	Son::Base::func(100);
}

int main()
{
	//test1();
	test2();

	system("pause");
}
