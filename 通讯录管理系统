//封装函数显示菜单界面 如void showmenu()
//在main函数中调用封装好的函数
#include<iostream>
#include<string>
using namespace std;
#define MAX 1000

//设计联系人结构体
struct person
{
	string m_name;
	int m_gender;// 1--男  2--女
	int m_age;
	string m_phone;
	string m_address;
};

//设计通讯录结构体
struct addressbooks
{
	//通讯录中保存的联系人数组
	struct person personarray[MAX];

	//通讯录中当前记录联系人个数
	int m_size;
};

//1.添加联系人
void addperson(addressbooks* abs)
{
	//判断通讯录是否已满  如果满了就不再添加
	if (abs->m_size==MAX)
	{
		cout << "通讯录已满  无法添加！" << endl;
		return;
	}
	else
	{
		//添加具体联系人
		string name;
		cout << "请输入姓名:" << endl;
		cin >> name;
		abs->personarray[abs->m_size].m_name = name;

		cout << "请输入性别：" << endl;
		cout << "1--男" << endl;
		cout << "2--女" << endl;
		int gender = 0;
		while (true)
		{
			//如果输入的是1或者2 可以退出循环  因为输入的是正确值
			//如果输入有误  重新输入
			cin >> gender;
			if (gender == 1 || gender == 2)
			{
				abs->personarray[abs->m_size].m_gender = gender;
				break;
			}
			cout << "输入有误  请重新输入" << endl;
		}

		cout << "请输入年龄:" << endl;
		int age = 0;
		while (true)
		{
			cin >> age;
			if (age>0&&age<=100)
			{
				abs->personarray[abs->m_size].m_age = age;
				break;
			}
			cout << "输入有误  请重新输入" << endl;
		}
		
		cout << "请输入联系电话:" << endl;
		string phone;
		cin >> phone;
		abs->personarray[abs->m_size].m_phone = phone;

		cout << "请输入家庭住址:" << endl;
		string address;
		cin >> address;
		abs->personarray[abs->m_size].m_address = address;

		//更新通讯录人数
		abs->m_size++;
		cout << "添加成功" << endl;

		system("pause");//请按任意键继续
		system("cls");//清屏操作
	}
}

//2.显示所有联系人
void showperson(addressbooks* abs)
{
	//判断通讯录中人数是否为0  如果为0  显示记录为空
	//如果不为0  显示记录的联系人信息
	if (abs->m_size==0)
	{
		cout << "当前记录为空" << endl;
	}
	else
	{
		for (int i = 0; i < abs->m_size; i++)
		{
			cout << "姓名:" << abs->personarray[i].m_name <<" \t";
			cout << "性别:" << (abs->personarray[i].m_gender == 1?"男":"女")<<" \t";
			cout << "年龄:" << abs->personarray[i].m_age<<" \t";
			cout << "电话:" << abs->personarray[i].m_phone <<" \t";
			cout << "地址:" << abs->personarray[i].m_address <<endl;
		}
	}
	system("pause");
	system("cls");
}

//检测联系人是否存在  如果存在  返回联系人所在数组中的具体位置  不存在返回-1
//参数1  通讯录  参数2  对比姓名
int isexist(addressbooks*abs,string name)
{
	for (int i = 0; i < abs->m_size; i++)
	{
		if (abs->personarray[i].m_name == name)
		{
			return i;
		}
	}
	return -1;//如果遍历结束都没有找到  返回-1
}

//3.删除指定联系人
void deleteperson(addressbooks* abs)
{
	cout << "请输入你要删除的联系人" << endl;

	string name;
	cin >> name;

	//return==-1  未查到
	//return！=-1 查到了
	int ret = isexist(abs, name);

	if (ret != -1)
	{
		//查找到此人  进行删除操作
		for (int i = ret; i < abs->m_size+1; i++)
		{
			//数据前移
			abs->personarray[i] = abs->personarray[i + 1];
		}
		abs->m_size--;//更新通讯录中的人员数
		cout << "删除成功" << endl;
	}
	else
	{
		cout << "查无此人" << endl;
	}
	system("pause");
	system("cls");
}

//4.查找指定联系人信息
void findperson(addressbooks* abs)
{
	cout << "请输入你要查找的联系人" << endl;
	string name;
	cin >> name;

	//判断指定的联系人是否存在通讯录中
	int ret = isexist(abs, name);

	if (ret!=-1)//找到联系人
	{
		cout << "姓名:" << abs->personarray[ret].m_name << "\t";
		cout << "性别:" << (abs->personarray[ret].m_gender == 1 ? "男":"女") << "\t";
		cout << "年龄:" << abs->personarray[ret].m_age << "\t";
		cout << "电话:" << abs->personarray[ret].m_phone << "\t";
		cout << "地址:" << abs->personarray[ret].m_address << endl;
	}
	else  //未找到联系人
	{
		cout << "查无此人" << endl;
	}

	system("pause");
	system("cls");
}

//5.修改指定联系人信息
void modifyperson(addressbooks* abs)
{
	cout << "请输入你要修改的联系人" << endl;
	string name;
	cin >> name;

	int ret=isexist(abs, name);

	if (ret!=-1)//找到指定联系人
	{
		string name;
		cout << "请输入姓名:" << endl;
		cin >> name;
		abs->personarray[ret].m_name = name;

		cout << "请输入性别:" << endl;
		cout << "1---男" << endl;
		cout << "2---女" << endl;
		int gender = 0;

		while (true)
		{
			cin >> gender;
			if (gender == 1 || gender == 2)
			{
				//输入正确  退出循环输入
				abs->personarray[ret].m_gender = gender;
				break;
			}
			cout << "输入有误  请重新输入" << endl;
		}

		cout << "请输入年龄:" << endl;
		int age = 0;
		cin >> age;
		abs->personarray[ret].m_age = age;

		cout << "请输入联系电话:" << endl;
		string phone;
		cin >> phone;
		abs->personarray[ret].m_phone = phone;

		cout << "请输入家庭住址" << endl;
		string address;
		cin >> address;
		abs->personarray[ret].m_address = address;

		cout << "修改成功！" << endl;
	}
	else //未找到联系人
	{
		cout << "查无此人" << endl;
	}

	system("pause");
	system("cls");
}

//6.清空所有联系人
void cleanperson(addressbooks* abs)
{
	abs->m_size = 0;//将当前记录的联系人数置为0  做逻辑清空操作
	cout << "通讯录已清空" << endl;

	system("pause");
	system("cls");
}

//菜单界面
void showmenu()
{
	cout << "**************************" << endl;
	cout << "*****  1.添加联系人  *****" << endl;
	cout << "*****  2.显示联系人  *****" << endl;
	cout << "*****  3.删除联系人  *****" << endl;
	cout << "*****  4.查找联系人  *****" << endl;
	cout << "*****  5.修改联系人  *****" << endl;
	cout << "*****  6.清空联系人  *****" << endl;
	cout << "*****  0.退出通讯录  *****" << endl;	
	cout << "**************************" << endl;
}

int main()
{
	//创建通讯录结构体变量
	addressbooks abs;
	//初始化通讯录中当前人员个数
	abs.m_size = 0;

	int select = 0;//创建用户选择输入的变量

	while (true)
	{
		//菜单调用
		showmenu();

		cin >> select;

		switch (select)
		{
		case 1://添加联系人
			addperson(&abs);//利用地址传递  可以修饰实参
			break;
		case 2://显示联系人
			showperson(&abs);
			break;
		case 3://删除联系人
		/*{	
			cout << "请输入想删除联系人的姓名:" << endl;
			string name;
			cin >> name;
			if (isexist(&abs, name) == -1)
			{
				cout << "查无此人" << endl;
			}
			else
			{
				cout << "找到此人" << endl;
			}
		}*/	
			deleteperson(&abs);
			break;
		case 4://查找联系人
			findperson(&abs);
			break;
		case 5://修改联系人
			modifyperson(&abs);
			break;
		case 6://清空联系人
			cleanperson(&abs);
			break;
		case 0://退出通讯录
			cout << "欢迎下次使用" << endl;
			system("pause");
			return 0;
			break;
		default:
			break;
		}
	}

	system("pause");
	return 0;
}
